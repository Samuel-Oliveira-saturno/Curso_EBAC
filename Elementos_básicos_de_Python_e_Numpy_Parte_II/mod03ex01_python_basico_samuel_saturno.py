# -*- coding: utf-8 -*-
"""Mod03Ex01 - Python basico_samuel_saturno.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kvk98TXW0i8zKRZMLOpnfhpX_476WpOb

### 01 - Teste de gravidez
Escreva uma célula com controle de fluxos que tem como premissa a existência das seguintes variáveis:

- ```sexo``` como ```str``` indicando os valores '**M**' para masculino e '**F**' para feminino  
- ```beta_hcg``` que indica a quantidade do beta-HCG no sangue em mUI/mL.

A sua tarefa é escrever um código que imprima como resultado "indivíduo do sexo masculino" quando sexo = 'M', caso sexo = 'F', se o valor de beta-HCG for maior que 5, retorne "Positivo" indicando que a paciente está grávida, e retorne "Negativo" caso contrário.

Não mexa nos valores da variável ```sexo``` nem em ```beta_hcg```, e escreva um código que funcione para quaisquer valores possíveis de ambos: ```sexo``` = '**M**' ou '**F**' e ```beta_hcg``` assumindo valores inteiros positivos.
"""

sexo = 'M'
beta_hcg = 0


# seu código vem abaixo desta linha
if sexo == 'M':
    print("Indivíduo do sexo masculino")
elif sexo == 'F':
    if beta_hcg > 5:
        print("Positivo")
    else:
        print("Negativo")

"""### 02 - Renomeando variáveis

Vamos ver adiante que uma forma de renomear variáveis de um conjunto de dados é através de dicionários - o dicionário deve conter como chave o nome original, associando a cada chave um único valor (tipo *str*) que contenha o nome novo.

A sua tarefa é escrever um dicionário que possa ser utilizado para traduzir as variáveis ```name``` (nome), ```age``` (idade) e ```income``` (renda). Ou seja, esse dicionário deve relacionar as chaves *name, age* e *income* às suas respectivas traduções.
"""

# Dicionário de tradução
dic_renomeacao = {
    'name': 'nome',
    'age': 'idade',
    'income': 'renda'
}

# Para verficar a alteração
nome_original = 'age'
nome_traduzido = dic_renomeacao[nome_original]
print(f"{nome_original} traduzido é {nome_traduzido}")

"""### 03 - É divisível?
A sua tarefa é escrever um código que indique se um número ```N``` é divisível por um número P. Escreva um programa que faça essa verificação para quaisquer combinações de ```N``` e ```M``` e devolva uma mensagem indicativa no output.
"""

N = 42
M = 7

#Seu código
# Função para verificar se N é divisível por P
def verifica_divisibilidade(N, P):
    if N % P == 0: # Verifica se a divisão de N por P é igual a zero
        return f"{N} é divisível por {P}."
    else:
        return f"{N} não é divisível por {P}."

# Atribuindo os valores
numero_N = int(input("Digite o valor de N: "))
numero_P = int(input("Digite o valor de P: "))

resultado = verifica_divisibilidade(numero_N, numero_P)
print(resultado)

"""### 04 - Números primos
> Um número **N** é primo se e somente se é divisível por 1, -1, por **N** e por -**N**.  

Escreva um script que verifica se ```N``` é um número primo, verificando se ```N``` é divisível por todos os números de ```1``` a ```N-1```. Você vai precisar usar alguma ferramenta de *loop* que você aprendeu para isto. No final, devolva uma mensagem no output indicando se o número é primo ou não.
"""

N = 47

# seu código abaixo
def verifica_primo(N):
    # Um número menor ou igual a 1 não é primo
    if N <= 1:
        return f"{N} não é um número primo."

    # Verifica divisibilidade por números de 2 até N-1
    for i in range(2, N):
        if N % i == 0:
            return f"{N} não é um número primo, pois é divisível por {i}."

    # Se nenhum divisor foi encontrado, N é primo
    return f"{N} é um número primo."

# Atribuindo o valor
numero_N = int(input("Digite um número inteiro positivo: "))
resultado = verifica_primo(numero_N)
print(resultado)

"""### 05 - Desafio
O algorítmo do exercício anterior não é o mais eficiente. O que você pode fazer para deixá-lo mais eficiente? Ou seja, executar menos comparações, portanto consumir menos tempo.
1. Será que precisamos correr o loop até o final sempre?
2. Será que precisamos mesmo verificar **todos** os números?
3. Será que precisamos ir até N-1?

Essas perguntas levam ao tipo de pensamento voltado a deixar um algoritmo mais eficiente. Veja se você consegue melhorar o seu.
"""

N = 98

# seu código aqui
# Definição da função lambda para verificar se um número é primo
verifica_primo = lambda N: f"{N} é um número primo." if N > 1 and all(N % i != 0 for i in range(2, N)) else f"{N} não é um número primo."

# Atribuindo o valor
numero_N = int(input("Digite um número inteiro positivo: "))  # Solicita ao usuário para inserir um número
resultado = verifica_primo(numero_N)  # Chama a função lambda para verificar se o número é primo
print(resultado)  # Imprime o resultado no output

"""### 06 - Peso ideal 1
O IMC (índice de massa corpórea) é um indicador de saúde mais bem aceito que o peso. Ele é calculado como:

$$ IMC = \dfrac{peso}{altura^2}$$

Segundo a OMS, valores *normais* são entre 18.5 e 24.9.

Sua tarefa é encontrar o ponto médio dessa faixa.
"""

# Valores da faixa de IMC normal
imc_minimo = 18.5
imc_maximo = 24.9

# Calculando o ponto médio
ponto_medio_imc = (imc_minimo + imc_maximo) / 2

# Imprimindo o resultado
print("O ponto médio da faixa de IMC normal é:", ponto_medio_imc)

"""### 07 - Peso ideal 2
Recebendo um valor de altura, encontre o peso '*ideal*' dessa pessoa, que fornece o IMC encontrado acima
"""

altura = 1.70

# Seu código
# Altura fornecida
altura = 1.70

# IMC médio da faixa normal
imc_medio = 21.7

# Calculando o peso ideal
peso_ideal = imc_medio * altura**2

# Imprimindo o resultado
print("O peso 'ideal' para a altura de", altura, "é:", peso_ideal)

"""### 08 - Peso ideal 3
Dada uma lista contendo as alturas de pacientes, crie uma nova lista que contenha o peso '*ideal*' (que fornece o IMC calculado em **Peso ideal 1**) desses pacientes.
"""

# seu código
# Lista de alturas dos pacientes
lista_alturas = [1.95, 2.05, 1.70, 1.65]

# IMC médio da faixa normal
imc_medio = 21.7

# Calculando a lista de pesos ideais
lista_peso_ideal = [imc_medio * altura**2 for altura in lista_alturas]

# Imprimindo a lista de pesos ideais
print("Lista de pesos 'ideais' para as alturas fornecidas:", lista_peso_ideal)

"""### 09 - Peso ideal 4
Dada uma lista de tuplas - cada elemento da lista é uma tupla contendo altura e peso de um paciente - crie uma nova lista com o IMC desses pacientes.
"""

# Lista de tuplas contendo altura e peso de pacientes
altura_peso = [(1.80, 90), (1.65, 75), (1.91, 70)]

# Calculando a lista de IMC
imc = [(peso / altura**2) for altura, peso in altura_peso]

# Imprimindo a lista de IMC
print("Lista de IMC dos pacientes:", imc)

"""### 10 - Peso ideal 5
Dada uma lista de **listas** - cada elemento da lista é uma **lista** contendo altura e peso de um paciente, adicione mais um elemento à lista de cada paciente contendo o IMC do paciente. Verifique também se é 'baixo', 'normal' ou 'alto' segundo os padrões da OMS em que normal é entre 18.5 e 24.9.

Reflexão: por que no problema anterior temos que criar uma nova lista, e não podemos adicionar os dados de cada indivíduo à tupla?
"""

# Lista de listas contendo altura e peso de pacientes
altura_peso = [[1.80, 90], [1.65, 75], [1.91, 70]]

# Adicionando IMC e classificação à lista de cada paciente
for paciente in altura_peso:
    altura, peso = paciente[0], paciente[1]
    imc = peso / altura**2
    paciente.append(imc)  # Adicionando IMC à lista do paciente

    # Determinando a classificação de acordo com os padrões da OMS
    if 18.5 <= imc <= 24.9:
        classificacao = 'normal'
    elif imc < 18.5:
        classificacao = 'baixo'
    else:
        classificacao = 'alto'

    paciente.append(classificacao)  # Adicionando a classificação à lista do paciente

# Imprimindo a lista de listas atualizada
print("Lista de listas com IMC e classificação:")
for paciente in altura_peso:
    print(paciente)